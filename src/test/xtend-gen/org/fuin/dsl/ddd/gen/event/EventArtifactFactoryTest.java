package org.fuin.dsl.ddd.gen.event;

import java.util.HashMap;
import javax.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.fest.assertions.Assertions;
import org.fest.assertions.StringAssert;
import org.fuin.dsl.ddd.DomainDrivenDesignDslInjectorProvider;
import org.fuin.dsl.ddd.domainDrivenDesignDsl.DomainModel;
import org.fuin.dsl.ddd.domainDrivenDesignDsl.Event;
import org.fuin.dsl.ddd.gen.base.Utils;
import org.fuin.dsl.ddd.gen.event.EventArtifactFactory;
import org.fuin.dsl.ddd.gen.extensions.DomainModelExtensions;
import org.fuin.srcgen4j.commons.ArtifactFactoryConfig;
import org.fuin.srcgen4j.commons.DefaultContext;
import org.fuin.srcgen4j.commons.GeneratedArtifact;
import org.fuin.srcgen4j.commons.Variable;
import org.fuin.srcgen4j.core.emf.CodeReferenceRegistry;
import org.junit.Test;
import org.junit.runner.RunWith;

@InjectWith(DomainDrivenDesignDslInjectorProvider.class)
@RunWith(XtextRunner.class)
@SuppressWarnings("all")
public class EventArtifactFactoryTest {
  @Inject
  private ParseHelper<DomainModel> parser;
  
  @Test
  public void testCreateDomainEvent() {
    try {
      final HashMap<String, Object> context = new HashMap<String, Object>();
      final CodeReferenceRegistry refReg = Utils.getCodeReferenceRegistry(context);
      refReg.putReference("ctx.types.String", "java.lang.String");
      refReg.putReference("ctx.a.b.CustomerId", "tst.ctx.a.b.CustomerId");
      final EventArtifactFactory testee = this.createTestee();
      DomainModel _model = this.model();
      final Event event = DomainModelExtensions.<Event>find(_model, Event.class, "CustomerCreatedEvent");
      GeneratedArtifact _create = testee.create(event, context, false);
      byte[] _data = _create.getData();
      final String result = new String(_data);
      StringAssert _assertThat = Assertions.assertThat(result);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package tst.ctx.a.b;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import javax.validation.constraints.NotNull;");
      _builder.newLine();
      _builder.append("import javax.xml.bind.annotation.XmlRootElement;");
      _builder.newLine();
      _builder.append("import org.fuin.ddd4j.ddd.AbstractDomainEvent;");
      _builder.newLine();
      _builder.append("import org.fuin.ddd4j.ddd.EntityIdPath;");
      _builder.newLine();
      _builder.append("import org.fuin.ddd4j.ddd.EventType;");
      _builder.newLine();
      _builder.append("import org.fuin.objects4j.vo.KeyValue;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/**");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* A new customer was created.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("@XmlRootElement(name = \"customer-created-event\")");
      _builder.newLine();
      _builder.append("public final class CustomerCreatedEvent extends AbstractDomainEvent<CustomerId> {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("private static final long serialVersionUID = 1000L;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/** Unique name used to store the event. */");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static final EventType EVENT_TYPE = new EventType(\"CustomerCreatedEvent\");");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Protected default constructor for deserialization.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("protected CustomerCreatedEvent() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("super();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* A new customer was created.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* @param entityIdPath Path from the aggregate root (first) to the entity that raised the event (last). ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public CustomerCreatedEvent(@NotNull final EntityIdPath entityIdPath) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("super(entityIdPath);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public final EventType getEventType() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return EVENT_TYPE;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public final String toString() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return KeyValue.replace(\"Customer created\",");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("new KeyValue(\"#entityIdPath\", getEntityIdPath())");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(");");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _assertThat.isEqualTo(_builder.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testCreateStandardEvent() {
    try {
      final HashMap<String, Object> context = new HashMap<String, Object>();
      final CodeReferenceRegistry refReg = Utils.getCodeReferenceRegistry(context);
      refReg.putReference("ctx.types.String", "java.lang.String");
      final EventArtifactFactory testee = this.createTestee();
      DomainModel _model = this.model();
      final Event event = DomainModelExtensions.<Event>find(_model, Event.class, "SomethingInterestingHappenedEvent");
      GeneratedArtifact _create = testee.create(event, context, false);
      byte[] _data = _create.getData();
      final String result = new String(_data);
      StringAssert _assertThat = Assertions.assertThat(result);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package tst.ctx.a.b;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import javax.xml.bind.annotation.XmlRootElement;");
      _builder.newLine();
      _builder.append("import org.fuin.ddd4j.ddd.AbstractDomainEvent;");
      _builder.newLine();
      _builder.append("import org.fuin.ddd4j.ddd.EntityIdPath;");
      _builder.newLine();
      _builder.append("import org.fuin.ddd4j.ddd.EventType;");
      _builder.newLine();
      _builder.append("import org.fuin.objects4j.vo.KeyValue;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/**");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Tells the world, that something interesting happened.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("@XmlRootElement(name = \"something-interesting-happened-event\")");
      _builder.newLine();
      _builder.append("public final class SomethingInterestingHappenedEvent extends AbstractEvent {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("private static final long serialVersionUID = 1000L;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/** Unique name used to store the event. */");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static final EventType EVENT_TYPE = new EventType(\"SomethingInterestingHappenedEvent\");");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Tells the world, that something interesting happened.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public SomethingInterestingHappenedEvent() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("super();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public final EventType getEventType() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return EVENT_TYPE;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public final String toString() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return \"Something interesting happened!\";");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _assertThat.isEqualTo(_builder.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private EventArtifactFactory createTestee() {
    final EventArtifactFactory factory = new EventArtifactFactory();
    String _name = EventArtifactFactory.class.getName();
    final ArtifactFactoryConfig config = new ArtifactFactoryConfig("event", _name);
    Variable _variable = new Variable("basepkg", "tst");
    config.addVariable(_variable);
    DefaultContext _defaultContext = new DefaultContext();
    config.init(_defaultContext, null);
    factory.init(config);
    return factory;
  }
  
  private DomainModel model() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context ctx {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("namespace a.b {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("type UUID");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("type String");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("aggregate-id CustomerId identifies Customer base UUID {\t}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("aggregate Customer identifier CustomerId {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constructor create fires CustomerCreatedEvent, SomethingInterestingHappenedEvent {\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("/** A new customer was created. */");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("event CustomerCreatedEvent {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("// No fields");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("message \"Customer created\"\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("/** Tells the world, that something interesting happened. */");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("event SomethingInterestingHappenedEvent {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("message \"Something interesting happened!\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      return this.parser.parse(_builder);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
