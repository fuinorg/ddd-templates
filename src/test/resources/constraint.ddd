context x {

	namespace types {
		type String
		type Integer
		type Boolean
	}
	
	namespace constr {
		
		import x.types.*
		
		value-object ValueObjectA {
			String a
		}

		value-object ValueObjectB {
			String a
			Integer b
		}
		
		value-object ValueObjectC {
			String a
			Integer b
			String c
		}
		
		value-object ValueObjectD {
			String a
			Integer b
			String c
			Boolean d
		}
		
		exception CException {
			String a
			Integer b
			String c
			message "C failed"
		}
		
		exception DException {
			String a
			Integer b
			String c
			Boolean d
			message "D failed"
		}

		exception GException {
			message "G failed"
		}
		exception HException {
			message "H failed"
		}
		
		
		/** Constraint A - Value object target - No exception - No variables */
		constraint ConstraintA input ValueObjectA {
			message "A is not allowed: ${input.a}"
		}

		/** Constraint B - Value object target - No exception - With variables */
		constraint ConstraintB input ValueObjectB {
			Integer a
			message "B is not allowed: ${a}: ${input.a} - ${input.b}"
		}
		
		/** Constraint C - Value object target - With exception - No variables */
		constraint ConstraintC input ValueObjectC exception CException {
			message "C is not allowed: ${input.a} - ${input.b} - ${input.c}"
		}

		/** Constraint D - Value object target - With exception - With variables */
		constraint ConstraintD input ValueObjectD exception DException {
			Integer a
			String b
			message "D is not allowed ${a} '${b}': ${input.a} - ${input.b} - ${input.c} - ${input.d}"
		}
		
		/** Constraint E - External type target - No exception - No variables */
		constraint ConstraintE input String {
			message "E is not allowed"
		}

		/** Constraint F - External type target - No exception - With variables */
		constraint ConstraintF input String {
			Integer a
			String b
			message "F is not allowed: ${a} '${b}': ${input}"
		}
		
		/** Constraint G - External type target - With exception - No variables */
		constraint ConstraintG input String exception GException {
			message "G is not allowed: ${input}"
		}

		/** Constraint H - External type target - With exception - With variables */
		constraint ConstraintH input String exception HException {
			Integer a
			String b
			message "H is not allowed: ${input}"
		}
		
	}

}
