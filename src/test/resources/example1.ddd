context x {

	namespace types {
		type String
		type Integer
	}
	
	namespace a {
		
		import x.types.*

		/** Example value object. */
		value-object MyValueObject {}

		/** Checks something. */
		constraint AnyConstraint exception ConstraintViolatedException {
			message "Any constraint"
		}
		
		/** The constraint was violated. */
		exception ConstraintViolatedException {
			message "Constraint violated"
		}

		/** Unique aggregate identifier. */
		aggregate-id MyAggregateId identifies MyAggregate base String {}

		/** Example aggregate. */
		aggregate MyAggregate identifier MyAggregateId {
			
			/** Does some cool things. */
			method doSomething constraints AnyConstraint fires DidSomethingEvent, SomethingHappenedEvent {
				
				MyAggregateId id
				nullable MyValueObject vo
				   
				/** MyAggregate did something event. */   
				event DidSomethingEvent {
					MyAggregateId id
					nullable MyValueObject vo
				}
				
			}

			/** Something happened in MyAggregate. */
			event SomethingHappenedEvent {
			}
			
		}

		/** Unique entity identifier. */
		entity-id MyEntityId identifies MyEntity base String {}

		/** Example entity. */
		entity MyEntity identifier MyEntityId root MyAggregate {
			
			/** Creates the entity. */
			constructor create constraints AnyConstraint {
				
				MyEntityId id
				
				/** Example value object. */
				nullable MyValueObject vo
				   
			}
			
		}

	}

}

